/**
 * PenTest.java
 * 
 * Revision History:<br>
 * Sep 16, 2008 bpaulson - File created
 * 
 * <p>
 * 
 * <pre>
 * This work is released under the BSD License:
 * (C) 2008 Sketch Recognition Lab, Texas A&amp;M University (hereafter SRL @ TAMU)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sketch Recognition Lab, Texas A&amp;M University 
 *       nor the names of its contributors may be used to endorse or promote 
 *       products derived from this software without specific prior written 
 *       permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY SRL @ TAMU ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL SRL @ TAMU BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * </pre>
 */
package test.unit.ladder.core.sketch;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.UUID;

import org.junit.Test;
import org.ladder.core.sketch.Pen;

import test.unit.SlothTest;

/**
 * Unit test class for core Pen implementation
 * 
 * @author bpaulson
 */
public class PenTest extends SlothTest {
	
	/**
	 * Test method for {@link org.ladder.core.sketch.Pen#Pen()}.
	 */
	@Test
	public void testPen() {
		Pen p = new Pen();
		assertNull(p.getBrand());
		assertNull(p.getDescription());
		assertNotNull(p.getID());
		assertNull(p.getPenID());
	}
	

	/**
	 * Test method for
	 * {@link org.ladder.core.sketch.Pen#Pen(java.lang.String, java.lang.String, java.lang.String)}
	 * .
	 */
	@Test
	public void testPenStringStringString() {
		String penID = randString();
		String brand = randString();
		String desc = randString();
		Pen p = new Pen(penID, brand, desc);
		assertEquals(penID, p.getPenID());
		assertEquals(brand, p.getBrand());
		assertEquals(desc, p.getDescription());
		assertNotNull(p.getID());
	}
	

	/**
	 * Test method for
	 * {@link org.ladder.core.sketch.Pen#Pen(org.ladder.core.sketch.Pen)}.
	 */
	@Test
	public void testPenPen() {
		String penID = randString();
		String brand = randString();
		String desc = randString();
		Pen p = new Pen(penID, brand, desc);
		Pen p2 = new Pen(p);
		assertEquals(penID, p2.getPenID());
		assertEquals(brand, p2.getBrand());
		assertEquals(desc, p2.getDescription());
		assertEquals(p.getID(), p2.getID());
	}
	

	/**
	 * Test method for {@link org.ladder.core.sketch.Pen#getID()}.
	 */
	@Test
	public void testGetID() {
		UUID id = UUID.randomUUID();
		Pen p = new Pen();
		p.setID(id);
		assertEquals(id, p.getID());
	}
	

	/**
	 * Test method for {@link org.ladder.core.sketch.Pen#getPenID()}.
	 */
	@Test
	public void testGetPenID() {
		Pen p = new Pen();
		String penID = randString();
		p.setPenID(penID);
		assertEquals(penID, p.getPenID());
	}
	

	/**
	 * Test method for {@link org.ladder.core.sketch.Pen#getBrand()}.
	 */
	@Test
	public void testGetBrand() {
		Pen p = new Pen();
		String brand = randString();
		p.setBrand(brand);
		assertEquals(brand, p.getBrand());
	}
	

	/**
	 * Test method for {@link org.ladder.core.sketch.Pen#getDescription()}.
	 */
	@Test
	public void testGetDescription() {
		Pen p = new Pen();
		String desc = randString();
		p.setDescription(desc);
		assertEquals(desc, p.getDescription());
	}
	

	/**
	 * Test method for {@link org.ladder.core.sketch.Pen#setID(java.util.UUID)}.
	 */
	@Test
	public void testSetID() {
		UUID id = UUID.randomUUID();
		Pen p = new Pen();
		p.setID(id);
		assertEquals(id, p.getID());
	}
	

	/**
	 * Test method for
	 * {@link org.ladder.core.sketch.Pen#setPenID(java.lang.String)}.
	 */
	@Test
	public void testSetPenID() {
		Pen p = new Pen();
		String penID = randString();
		p.setPenID(penID);
		assertEquals(penID, p.getPenID());
	}
	

	/**
	 * Test method for
	 * {@link org.ladder.core.sketch.Pen#setBrand(java.lang.String)}.
	 */
	@Test
	public void testSetBrand() {
		Pen p = new Pen();
		String brand = randString();
		p.setBrand(brand);
		assertEquals(brand, p.getBrand());
	}
	

	/**
	 * Test method for
	 * {@link org.ladder.core.sketch.Pen#setDescription(java.lang.String)}.
	 */
	@Test
	public void testSetDescription() {
		Pen p = new Pen();
		String desc = randString();
		p.setDescription(desc);
		assertEquals(desc, p.getDescription());
	}
	

	/**
	 * Test method for
	 * {@link org.ladder.core.sketch.Pen#equals(java.lang.Object)}.
	 */
	@Test
	public void testEqualsObject() {
		Pen p1 = new Pen();
		Pen p2 = new Pen();
		p2.setID(p1.getID());
		assertTrue(p1.equals(p2));
	}
	

	/**
	 * Test method for {@link org.ladder.core.sketch.Pen#clone()}.
	 */
	@Test
	public void testClone() {
		Pen p1 = new Pen(randString(), randString(), randString());
		Pen p2 = (Pen) p1.clone();
		assertEquals(p1.getBrand(), p2.getBrand());
		assertEquals(p1.getDescription(), p2.getDescription());
		assertEquals(p1.getID(), p2.getID());
		assertEquals(p1.getPenID(), p2.getPenID());
	}
	
}
